{
  "meta": {
    "module": "src/features/plansolopro/micrositio/micrositio/blog-noticias",
    "side": "backend",
    "run_id": "2024-01-15T10:00:00Z",
    "base_path": "/api/blog-articulos"
  },
  "prompts": [
    {
      "id": "P1",
      "order": 1,
      "title": "Crear modelo BlogArticulo con esquema MongoDB",
      "files_hint": [
        "backend/src/models/BlogArticulo.model.js"
      ],
      "preconditions": [
        "MongoDB configurado en el proyecto",
        "Mongoose disponible en el backend"
      ],
      "content": "Crea el archivo backend/src/models/BlogArticulo.model.js. 1) Importa mongoose. 2) Define el esquema con campos: titulo (String, required, trim), imagen (String, trim), extracto (String, required, trim), contenido (String, required, trim), categoria (String, required, trim), autor (String, trim), tags (Array de String), esPublico (Boolean, default true), vistas (Number, default 0), isDeleted (Boolean, default false). 3) Añade timestamps: true. 4) Crea índices para categoria, esPublico, isDeleted. 5) Añade método virtual para fechaPublicacion que retorne createdAt. 6) Exporta el modelo como default. 7) Muestra el diff completo del archivo y espera confirmación antes de aplicar.",
      "expected_changes": [
        "BlogArticulo.model.js creado con esquema completo",
        "Índices de base de datos definidos",
        "Métodos virtuales implementados"
      ],
      "acceptance_criteria": [
        "El modelo se puede importar sin errores",
        "El esquema incluye todos los campos especificados",
        "Los índices están correctamente definidos",
        "El método virtual fechaPublicacion funciona"
      ],
      "timeout_sec": 180,
      "rollback_plan": "Eliminar BlogArticulo.model.js si falla la importación o hay errores de esquema."
    },
    {
      "id": "P2",
      "order": 2,
      "title": "Crear controlador con funciones CRUD para BlogArticulo",
      "files_hint": [
        "backend/src/controllers/blogArticulo.controller.js"
      ],
      "preconditions": [
        "BlogArticulo.model.js existe y es importable",
        "Middleware de autenticación disponible"
      ],
      "content": "Crea el archivo backend/src/controllers/blogArticulo.controller.js. 1) Importa BlogArticulo del modelo. 2) Implementa getArticulos: GET con filtros por categoria, search, paginación (page, limit), ordenamiento por fechaPublicacion desc. 3) Implementa getArticuloById: GET por ID con incremento de vistas. 4) Implementa getCategorias: GET que retorna array único de categorías. 5) Implementa createArticulo: POST con validación de datos. 6) Implementa updateArticulo: PUT por ID. 7) Implementa deleteArticulo: DELETE suave (isDeleted=true). 8) Todos los endpoints retornan formato {success: boolean, data: any, message?: string}. 9) Maneja errores con try-catch y respuestas HTTP apropiadas. 10) Muestra el diff completo y espera confirmación.",
      "expected_changes": [
        "blogArticulo.controller.js creado con 6 funciones exportadas",
        "Manejo de errores implementado en todas las funciones",
        "Formato de respuesta estandarizado",
        "Lógica de paginación y filtros implementada"
      ],
      "acceptance_criteria": [
        "Todas las funciones se pueden importar sin errores",
        "getArticulos maneja filtros y paginación",
        "getArticuloById incrementa el contador de vistas",
        "getCategorias retorna array único de categorías",
        "createArticulo valida datos requeridos",
        "updateArticulo permite actualización parcial",
        "deleteArticulo hace soft delete"
      ],
      "timeout_sec": 240,
      "rollback_plan": "Eliminar blogArticulo.controller.js si alguna función falla al importar o tiene errores de sintaxis."
    },
    {
      "id": "P3",
      "order": 3,
      "title": "Crear rutas REST para BlogArticulo con validaciones",
      "files_hint": [
        "backend/src/routes/blogArticulo.routes.js"
      ],
      "preconditions": [
        "blogArticulo.controller.js existe con todas las funciones",
        "Middleware de validación disponible (express-validator)",
        "Middleware de autenticación disponible"
      ],
      "content": "Crea el archivo backend/src/routes/blogArticulo.routes.js. 1) Importa express, todas las funciones del controlador, protect middleware, y express-validator. 2) Define validaciones: titulo (required, 5-200 chars), extracto (required, 10-500 chars), contenido (required, min 50 chars), categoria (required, 2-50 chars), imagen (optional URL), autor (optional, 2-100 chars), tags (optional array), esPublico (optional boolean). 3) Configura rutas: GET / (getArticulos), GET /categorias (getCategorias), GET /:id (getArticuloById), POST / (createArticulo con validación), PUT /:id (updateArticulo con validación), DELETE /:id (deleteArticulo). 4) Aplica middleware protect a todas las rutas. 5) Aplica validaciones a POST y PUT. 6) Añade validación de MongoDB ObjectId para parámetros :id. 7) Exporta router como default. 8) Muestra el diff completo y espera confirmación.",
      "expected_changes": [
        "blogArticulo.routes.js creado con 6 rutas REST",
        "Validaciones de express-validator implementadas",
        "Middleware de autenticación aplicado",
        "Validación de ObjectId para parámetros"
      ],
      "acceptance_criteria": [
        "Todas las rutas están correctamente definidas",
        "Las validaciones rechazan datos inválidos",
        "El middleware de autenticación está aplicado",
        "La validación de ObjectId funciona para parámetros :id",
        "El router se exporta correctamente"
      ],
      "timeout_sec": 180,
      "rollback_plan": "Eliminar blogArticulo.routes.js si las rutas no se montan correctamente o hay errores de validación."
    },
    {
      "id": "P4",
      "order": 4,
      "title": "Integrar rutas de BlogArticulo en el router principal de la API",
      "files_hint": [
        "backend/src/routes/api.routes.js"
      ],
      "preconditions": [
        "blogArticulo.routes.js existe y exporta router correctamente",
        "api.routes.js existe y maneja otras rutas del sistema"
      ],
      "content": "Modifica backend/src/routes/api.routes.js. 1) Añade import de blogArticuloRoutes desde './blogArticulo.routes.js'. 2) En el objeto endpoints del GET /, añade blogArticulos: '/api/blog-articulos'. 3) Añade router.use('/blog-articulos', blogArticuloRoutes) después de las otras rutas. 4) Verifica que el orden de las rutas no cause conflictos. 5) Muestra el diff de las líneas modificadas y espera confirmación antes de aplicar.",
      "expected_changes": [
        "api.routes.js: nuevo import de blogArticuloRoutes",
        "api.routes.js: blogArticulos añadido al objeto endpoints",
        "api.routes.js: router.use('/blog-articulos', blogArticuloRoutes) añadido"
      ],
      "acceptance_criteria": [
        "El import de blogArticuloRoutes no genera errores",
        "La ruta /api/blog-articulos está disponible",
        "El endpoint aparece en la respuesta del GET /api",
        "No hay conflictos con otras rutas existentes"
      ],
      "timeout_sec": 120,
      "rollback_plan": "Revertir los cambios en api.routes.js si la integración causa errores de importación o conflictos de rutas."
    },
    {
      "id": "P5",
      "order": 5,
      "title": "Crear middleware de validación específico para BlogArticulo",
      "files_hint": [
        "backend/src/middleware/validate.middleware.js"
      ],
      "preconditions": [
        "express-validator disponible en el proyecto",
        "Middleware de manejo de errores existente"
      ],
      "content": "Crea o modifica backend/src/middleware/validate.middleware.js. 1) Si no existe, crea el archivo con handleValidationErrors. 2) Añade validateArticulo array con validaciones: titulo (notEmpty, trim, 5-200 chars), extracto (notEmpty, trim, 10-500 chars), contenido (notEmpty, trim, min 50 chars), categoria (notEmpty, trim, 2-50 chars), imagen (optional URL), autor (optional, trim, 2-100 chars), tags (optional array), esPublico (optional boolean). 3) Añade validateMongoId para parámetros :id. 4) Exporta handleValidationErrors, validateArticulo, validateMongoId. 5) Muestra el diff completo y espera confirmación.",
      "expected_changes": [
        "validate.middleware.js: validateArticulo array creado",
        "validate.middleware.js: validateMongoId función creada",
        "validate.middleware.js: todas las validaciones exportadas"
      ],
      "acceptance_criteria": [
        "validateArticulo valida todos los campos requeridos",
        "validateMongoId valida ObjectId correctamente",
        "handleValidationErrors maneja errores de validación",
        "Todas las funciones se pueden importar sin errores"
      ],
      "timeout_sec": 150,
      "rollback_plan": "Revertir cambios en validate.middleware.js si las validaciones no funcionan correctamente."
    },
    {
      "id": "P6",
      "order": 6,
      "title": "Probar endpoints de BlogArticulo con tests de integración",
      "files_hint": [
        "backend/src/__tests__/blogArticulo.test.js"
      ],
      "preconditions": [
        "Todas las rutas de BlogArticulo están montadas y funcionando",
        "Base de datos de test configurada",
        "Supertest disponible para testing"
      ],
      "content": "Crea backend/src/__tests__/blogArticulo.test.js. 1) Importa supertest, app, y BlogArticulo model. 2) Configura setup/teardown para limpiar base de datos. 3) Test GET /api/blog-articulos: debe retornar 200 con array. 4) Test GET /api/blog-articulos/categorias: debe retornar 200 con array de categorías. 5) Test POST /api/blog-articulos: debe crear artículo y retornar 201. 6) Test GET /api/blog-articulos/:id: debe retornar artículo específico. 7) Test PUT /api/blog-articulos/:id: debe actualizar artículo. 8) Test DELETE /api/blog-articulos/:id: debe hacer soft delete. 9) Test validaciones: debe rechazar datos inválidos con 400. 10) Ejecuta los tests y muestra resultados. 11) Muestra el diff del archivo de test y espera confirmación.",
      "expected_changes": [
        "blogArticulo.test.js creado con tests completos",
        "Tests cubren todos los endpoints CRUD",
        "Tests de validación implementados",
        "Setup/teardown de base de datos configurado"
      ],
      "acceptance_criteria": [
        "Todos los tests pasan exitosamente",
        "GET /api/blog-articulos retorna 200 con array",
        "POST /api/blog-articulos crea artículo correctamente",
        "Validaciones rechazan datos inválidos",
        "Soft delete funciona correctamente"
      ],
      "timeout_sec": 300,
      "rollback_plan": "Eliminar blogArticulo.test.js si los tests fallan o causan errores en la base de datos."
    }
  ]
}
