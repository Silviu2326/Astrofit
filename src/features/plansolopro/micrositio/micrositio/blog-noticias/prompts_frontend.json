{
  "meta": {
    "module": "src/features/plansolopro/micrositio/micrositio/blog-noticias",
    "side": "frontend",
    "run_id": "2024-01-15T10:00:00Z",
    "base_path": "/api/blog-articulos"
  },
  "prompts": [
    {
      "id": "P1",
      "order": 1,
      "title": "Reemplazar mocks por servicios HTTP reales en blogNoticiasApi.ts",
      "files_hint": [
        "src/features/plansolopro/micrositio/micrositio/blog-noticias/blogNoticiasApi.ts"
      ],
      "preconditions": [
        "axios disponible en el proyecto",
        "Variables de entorno configuradas (VITE_API_URL)",
        "Interfaz Articulo ya definida"
      ],
      "content": "Modifica src/features/plansolopro/micrositio/micrositio/blog-noticias/blogNoticiasApi.ts. 1) Elimina el array mock de articulos y las funciones con setTimeout. 2) Añade const API_BASE_URL = import.meta.env.VITE_API_URL || 'http://localhost:5000/api'. 3) Reemplaza getArticulos: usa axios.get con query params para categoria y searchTerm, retorna response.data.data. 4) Reemplaza getArticuloById: usa axios.get con ID en URL, retorna response.data.data. 5) Reemplaza getCategorias: usa axios.get a /categorias, retorna response.data.data. 6) Añade manejo de errores con try-catch en cada función. 7) Añade headers de autenticación si es necesario. 8) Mantén las interfaces TypeScript existentes. 9) Muestra el diff completo del archivo y espera confirmación antes de aplicar.",
      "expected_changes": [
        "blogNoticiasApi.ts: eliminados mocks y setTimeout",
        "blogNoticiasApi.ts: implementadas llamadas HTTP reales",
        "blogNoticiasApi.ts: añadido manejo de errores",
        "blogNoticiasApi.ts: configurado API_BASE_URL desde variables de entorno"
      ],
      "acceptance_criteria": [
        "getArticulos hace llamada HTTP a /api/blog-articulos",
        "getArticuloById hace llamada HTTP a /api/blog-articulos/:id",
        "getCategorias hace llamada HTTP a /api/blog-articulos/categorias",
        "Todas las funciones manejan errores correctamente",
        "No quedan mocks ni datos hardcodeados"
      ],
      "timeout_sec": 180,
      "rollback_plan": "Revertir cambios en blogNoticiasApi.ts si las llamadas HTTP fallan o hay errores de importación."
    },
    {
      "id": "P2",
      "order": 2,
      "title": "Integrar estados de loading y error en FeedArticulos",
      "files_hint": [
        "src/features/plansolopro/micrositio/micrositio/blog-noticias/components/FeedArticulos.tsx"
      ],
      "preconditions": [
        "blogNoticiasApi.ts actualizado con llamadas HTTP reales",
        "Componente FeedArticulos existe y funciona con mocks"
      ],
      "content": "Modifica src/features/plansolopro/micrositio/micrositio/blog-noticias/components/FeedArticulos.tsx. 1) Añade estados: const [loading, setLoading] = useState(true), const [error, setError] = useState<string | null>(null). 2) En useEffect, envuelve getArticulos() en try-catch: setLoading(true) al inicio, setError(null) al inicio, setError('Error al cargar artículos') en catch, setLoading(false) en finally. 3) Añade render condicional: si loading retorna <div className='text-center p-4'>Cargando artículos...</div>, si error retorna <div className='text-red-500 text-center p-4'>Error: {error}</div>, si articulos.length === 0 retorna <div className='text-gray-500 text-center p-4'>No hay artículos disponibles</div>. 4) Mantén el render normal solo cuando hay datos. 5) Muestra el diff del archivo y espera confirmación antes de aplicar.",
      "expected_changes": [
        "FeedArticulos.tsx: añadidos estados loading y error",
        "FeedArticulos.tsx: implementado try-catch en useEffect",
        "FeedArticulos.tsx: añadido render condicional para loading/error/empty",
        "FeedArticulos.tsx: mejorado UX con mensajes informativos"
      ],
      "acceptance_criteria": [
        "Al cargar se muestra 'Cargando artículos...'",
        "Si hay error se muestra mensaje de error",
        "Si no hay artículos se muestra 'No hay artículos disponibles'",
        "Los artículos se muestran normalmente cuando hay datos",
        "No hay errores de consola durante la carga"
      ],
      "timeout_sec": 150,
      "rollback_plan": "Revertir cambios en FeedArticulos.tsx si los estados causan errores de renderizado o bucles infinitos."
    },
    {
      "id": "P3",
      "order": 3,
      "title": "Integrar estados de loading y error en ArticuloCompleto",
      "files_hint": [
        "src/features/plansolopro/micrositio/micrositio/blog-noticias/components/ArticuloCompleto.tsx"
      ],
      "preconditions": [
        "blogNoticiasApi.ts actualizado con getArticuloById HTTP",
        "Componente ArticuloCompleto existe y funciona con mocks"
      ],
      "content": "Modifica src/features/plansolopro/micrositio/micrositio/blog-noticias/components/ArticuloCompleto.tsx. 1) Añade estados: const [loading, setLoading] = useState(true), const [error, setError] = useState<string | null>(null). 2) En useEffect, envuelve getArticuloById(id) en try-catch: setLoading(true) al inicio, setError(null) al inicio, setError('Error al cargar el artículo') en catch, setLoading(false) en finally. 3) Añade render condicional: si loading retorna <div className='text-center p-4'>Cargando artículo...</div>, si error retorna <div className='text-red-500 text-center p-4'>Error: {error}</div>, si !articulo retorna <div className='text-gray-500 text-center p-4'>Artículo no encontrado</div>. 4) Mantén el render normal solo cuando articulo existe. 5) Muestra el diff del archivo y espera confirmación antes de aplicar.",
      "expected_changes": [
        "ArticuloCompleto.tsx: añadidos estados loading y error",
        "ArticuloCompleto.tsx: implementado try-catch en useEffect",
        "ArticuloCompleto.tsx: añadido render condicional para loading/error/not-found",
        "ArticuloCompleto.tsx: mejorado UX con mensajes informativos"
      ],
      "acceptance_criteria": [
        "Al cargar se muestra 'Cargando artículo...'",
        "Si hay error se muestra mensaje de error",
        "Si no se encuentra el artículo se muestra 'Artículo no encontrado'",
        "El artículo se muestra normalmente cuando existe",
        "No hay errores de consola durante la carga"
      ],
      "timeout_sec": 150,
      "rollback_plan": "Revertir cambios en ArticuloCompleto.tsx si los estados causan errores de renderizado o bucles infinitos."
    },
    {
      "id": "P4",
      "order": 4,
      "title": "Integrar filtros y búsqueda con backend en CategoriasFiltro",
      "files_hint": [
        "src/features/plansolopro/micrositio/micrositio/blog-noticias/components/CategoriasFiltro.tsx",
        "src/features/plansolopro/micrositio/micrositio/blog-noticias/components/FeedArticulos.tsx"
      ],
      "preconditions": [
        "blogNoticiasApi.ts actualizado con getCategorias HTTP",
        "Componente CategoriasFiltro existe con lógica de filtros local"
      ],
      "content": "Modifica src/features/plansolopro/micrositio/micrositio/blog-noticias/components/CategoriasFiltro.tsx. 1) Añade estados: const [loading, setLoading] = useState(true), const [error, setError] = useState<string | null>(null). 2) En useEffect, envuelve getCategorias() en try-catch con manejo de loading/error. 3) Añade props: onCategoryChange?: (category: string) => void, onSearchChange?: (search: string) => void. 4) Modifica handleCategoryChange para llamar onCategoryChange(selectedCategory). 5) Modifica handleSearchChange para llamar onSearchChange(searchTerm). 6) Añade render condicional para loading/error. 7) Luego modifica FeedArticulos.tsx: añade estados para categoria y searchTerm, pasa las funciones como props a CategoriasFiltro, modifica useEffect para usar los filtros en getArticulos(categoria, searchTerm). 8) Muestra los diffs de ambos archivos y espera confirmación antes de aplicar.",
      "expected_changes": [
        "CategoriasFiltro.tsx: añadidos estados loading/error",
        "CategoriasFiltro.tsx: añadidas props para comunicación con padre",
        "CategoriasFiltro.tsx: implementado try-catch para getCategorias",
        "FeedArticulos.tsx: añadidos estados para filtros",
        "FeedArticulos.tsx: implementada comunicación con CategoriasFiltro",
        "FeedArticulos.tsx: filtros aplicados en getArticulos"
      ],
      "acceptance_criteria": [
        "Las categorías se cargan desde el backend",
        "El filtro por categoría funciona correctamente",
        "La búsqueda por texto funciona correctamente",
        "Los filtros se aplican en tiempo real",
        "No hay errores de consola durante el filtrado"
      ],
      "timeout_sec": 200,
      "rollback_plan": "Revertir cambios en CategoriasFiltro.tsx y FeedArticulos.tsx si la comunicación entre componentes falla o hay errores de renderizado."
    },
    {
      "id": "P5",
      "order": 5,
      "title": "Actualizar interfaz Articulo con campos del backend",
      "files_hint": [
        "src/features/plansolopro/micrositio/micrositio/blog-noticias/blogNoticiasApi.ts"
      ],
      "preconditions": [
        "Backend implementado con modelo BlogArticulo completo",
        "Interfaz Articulo actualmente básica"
      ],
      "content": "Modifica src/features/plansolopro/micrositio/micrositio/blog-noticias/blogNoticiasApi.ts. 1) Actualiza la interfaz Articulo para incluir todos los campos del backend: id, titulo, imagen, extracto, contenido, categoria, fechaPublicacion, autor?, tags?, esPublico, vistas, createdAt, updatedAt. 2) Añade interfaces para responses: ArticulosResponse { success: boolean, data: Articulo[], total: number, page: number, limit: number }, ArticuloResponse { success: boolean, data: Articulo }, CategoriasResponse { success: boolean, data: string[] }. 3) Actualiza las funciones para usar las interfaces de response correctas. 4) Añade manejo de paginación en getArticulos (parámetros opcionales page, limit). 5) Muestra el diff del archivo y espera confirmación antes de aplicar.",
      "expected_changes": [
        "blogNoticiasApi.ts: interfaz Articulo actualizada con todos los campos",
        "blogNoticiasApi.ts: añadidas interfaces de response",
        "blogNoticiasApi.ts: implementado manejo de paginación",
        "blogNoticiasApi.ts: funciones actualizadas para usar interfaces correctas"
      ],
      "acceptance_criteria": [
        "La interfaz Articulo incluye todos los campos del backend",
        "Las interfaces de response coinciden con el backend",
        "getArticulos maneja parámetros de paginación",
        "No hay errores de TypeScript en las interfaces",
        "Las funciones retornan el tipo correcto"
      ],
      "timeout_sec": 120,
      "rollback_plan": "Revertir cambios en blogNoticiasApi.ts si las interfaces causan errores de TypeScript o incompatibilidad con el backend."
    },
    {
      "id": "P6",
      "order": 6,
      "title": "Añadir manejo de autenticación en las llamadas HTTP",
      "files_hint": [
        "src/features/plansolopro/micrositio/micrositio/blog-noticias/blogNoticiasApi.ts"
      ],
      "preconditions": [
        "Sistema de autenticación implementado en el frontend",
        "Tokens de autenticación disponibles (localStorage o context)"
      ],
      "content": "Modifica src/features/plansolopro/micrositio/micrositio/blog-noticias/blogNoticiasApi.ts. 1) Añade función getAuthHeaders() que retorna headers con Authorization: Bearer token desde localStorage o context. 2) Actualiza todas las llamadas axios para incluir headers: { ...getAuthHeaders() }. 3) Añade manejo de errores 401 (no autorizado): si response.status === 401, redirigir a login o mostrar mensaje de autenticación requerida. 4) Añade manejo de errores 403 (prohibido): mostrar mensaje de permisos insuficientes. 5) Añade interceptor de axios para manejar tokens expirados automáticamente. 6) Muestra el diff del archivo y espera confirmación antes de aplicar.",
      "expected_changes": [
        "blogNoticiasApi.ts: añadida función getAuthHeaders",
        "blogNoticiasApi.ts: headers de autenticación en todas las llamadas",
        "blogNoticiasApi.ts: manejo de errores 401 y 403",
        "blogNoticiasApi.ts: interceptor para tokens expirados"
      ],
      "acceptance_criteria": [
        "Todas las llamadas incluyen headers de autenticación",
        "Los errores 401 redirigen a login o muestran mensaje",
        "Los errores 403 muestran mensaje de permisos",
        "El interceptor maneja tokens expirados automáticamente",
        "No hay errores de consola por autenticación"
      ],
      "timeout_sec": 180,
      "rollback_plan": "Revertir cambios en blogNoticiasApi.ts si la autenticación causa errores de headers o problemas de seguridad."
    },
    {
      "id": "P7",
      "order": 7,
      "title": "Implementar paginación en FeedArticulos",
      "files_hint": [
        "src/features/plansolopro/micrositio/micrositio/blog-noticias/components/FeedArticulos.tsx"
      ],
      "preconditions": [
        "blogNoticiasApi.ts actualizado con soporte de paginación",
        "Componente FeedArticulos funcionando con filtros"
      ],
      "content": "Modifica src/features/plansolopro/micrositio/micrositio/blog-noticias/components/FeedArticulos.tsx. 1) Añade estados: const [page, setPage] = useState(1), const [total, setTotal] = useState(0), const [hasMore, setHasMore] = useState(true). 2) Modifica useEffect para usar getArticulos con parámetros de paginación. 3) Añade función loadMore() que incrementa page y carga más artículos. 4) Añade función resetPagination() que resetea page a 1 y limpia articulos. 5) Añade botón 'Cargar más' que aparece cuando hasMore es true. 6) Añade indicador de 'Cargando más...' durante loadMore. 7) Modifica el render para mostrar total de artículos. 8) Muestra el diff del archivo y espera confirmación antes de aplicar.",
      "expected_changes": [
        "FeedArticulos.tsx: añadidos estados de paginación",
        "FeedArticulos.tsx: implementada función loadMore",
        "FeedArticulos.tsx: añadido botón 'Cargar más'",
        "FeedArticulos.tsx: añadido indicador de carga para más artículos",
        "FeedArticulos.tsx: mostrado total de artículos"
      ],
      "acceptance_criteria": [
        "Los artículos se cargan por páginas",
        "El botón 'Cargar más' funciona correctamente",
        "Se muestra el total de artículos disponibles",
        "El indicador de 'Cargando más...' aparece durante la carga",
        "La paginación se resetea al cambiar filtros"
      ],
      "timeout_sec": 200,
      "rollback_plan": "Revertir cambios en FeedArticulos.tsx si la paginación causa errores de estado o bucles infinitos."
    },
    {
      "id": "P8",
      "order": 8,
      "title": "Probar integración completa del módulo blog-noticias",
      "files_hint": [
        "src/features/plansolopro/micrositio/micrositio/blog-noticias/BlogNoticiasPage.tsx",
        "src/features/plansolopro/micrositio/micrositio/blog-noticias/components/"
      ],
      "preconditions": [
        "Todos los componentes actualizados con estados y manejo de errores",
        "Backend funcionando con endpoints de blog-articulos",
        "Autenticación configurada correctamente"
      ],
      "content": "Realiza pruebas de integración completa del módulo blog-noticias. 1) Abre BlogNoticiasPage.tsx y verifica que el routing funciona correctamente. 2) Prueba la carga inicial: debe mostrar loading, luego artículos o mensaje de empty. 3) Prueba los filtros: categorías deben cargarse desde backend, filtrado debe funcionar. 4) Prueba la búsqueda: debe filtrar artículos por texto. 5) Prueba la paginación: botón 'Cargar más' debe funcionar. 6) Prueba la navegación a artículo individual: debe cargar artículo específico. 7) Prueba manejo de errores: simula error de red, debe mostrar mensaje de error. 8) Verifica que no hay errores de consola. 9) Verifica que todas las llamadas HTTP van al endpoint correcto /api/blog-articulos. 10) Documenta cualquier problema encontrado y su solución.",
      "expected_changes": [
        "BlogNoticiasPage.tsx: verificado funcionamiento completo",
        "Todos los componentes: probados con datos reales del backend",
        "Integración: confirmada comunicación FE-BE",
        "Errores: identificados y solucionados"
      ],
      "acceptance_criteria": [
        "La página carga correctamente sin errores",
        "Los filtros y búsqueda funcionan con datos reales",
        "La paginación carga más artículos correctamente",
        "La navegación a artículos individuales funciona",
        "El manejo de errores muestra mensajes apropiados",
        "No hay errores de consola durante el uso normal",
        "Todas las llamadas HTTP van al endpoint correcto"
      ],
      "timeout_sec": 300,
      "rollback_plan": "Identificar y revertir los cambios específicos que causan problemas de integración, manteniendo solo las funcionalidades que funcionan correctamente."
    }
  ]
}
