import React, { useEffect, useState } from 'react';

interface SmartAlert {
  id: string;
  type: 'financial' | 'operational' | 'commercial' | 'risk';
  severity: 'info' | 'warning' | 'critical' | 'urgent';
  title: string;
  description: string;
  metric?: string;
  currentValue?: number;
  threshold?: number;
  trend: 'improving' | 'stable' | 'declining';
  impact: 'low' | 'medium' | 'high';
  timeframe: string;
  autoGenerated: boolean;
  actionRequired: boolean;
  estimatedRevenueLoss?: number;
  recommendations: {
    action: string;
    priority: 'high' | 'medium' | 'low';
    timeframe: string;
    expectedImpact: string;
  }[];
  relatedClients?: string[];
  createdAt: string;
  status: 'active' | 'in_progress' | 'resolved' | 'dismissed';
}

const AlertasInteligentes: React.FC = () => {
  const [alerts, setAlerts] = useState<SmartAlert[]>([]);
  const [loading, setLoading] = useState(true);
  const [filter, setFilter] = useState<'all' | 'critical' | 'actionable' | 'unresolved'>('all');
  const [selectedType, setSelectedType] = useState<'all' | 'financial' | 'operational' | 'commercial' | 'risk'>('all');

  useEffect(() => {
    setTimeout(() => {
      const mockAlerts: SmartAlert[] = [
        {
          id: 'ALT-001',
          type: 'financial',
          severity: 'critical',
          title: 'Flujo de Caja Cr√≠tico Proyectado',
          description: 'El balance proyectado caer√° por debajo del m√≠nimo operativo en 15 d√≠as',
          metric: 'Saldo M√≠nimo',
          currentValue: 15750,
          threshold: 5000,
          trend: 'declining',
          impact: 'high',
          timeframe: '15 d√≠as',
          autoGenerated: true,
          actionRequired: true,
          estimatedRevenueLoss: 8500,
          recommendations: [
            { action: 'Acelerar cobros pendientes', priority: 'high', timeframe: '3 d√≠as', expectedImpact: 'Recuperar 2.800‚Ç¨' },
            { action: 'Diferir pagos no cr√≠ticos', priority: 'high', timeframe: '1 d√≠a', expectedImpact: 'Preservar 1.500‚Ç¨' },
            { action: 'Activar l√≠nea de cr√©dito', priority: 'medium', timeframe: '5 d√≠as', expectedImpact: 'Liquidez adicional 10.000‚Ç¨' }
          ],
          relatedClients: ['Mar√≠a L√≥pez', 'Pedro Mart√≠n'],
          createdAt: '2025-01-27',
          status: 'active'
        },
        {
          id: 'ALT-002',
          type: 'commercial',
          severity: 'urgent',
          title: 'Cliente Premium en Riesgo Extremo',
          description: 'Ana Garc√≠a (1.200‚Ç¨/mes) muestra patrones de cancelaci√≥n inmediata',
          metric: 'Probabilidad Churn',
          currentValue: 85,
          threshold: 70,
          trend: 'declining',
          impact: 'high',
          timeframe: 'Inmediato',
          autoGenerated: true,
          actionRequired: true,
          estimatedRevenueLoss: 14400,
          recommendations: [
            { action: 'Contacto personal inmediato', priority: 'high', timeframe: 'Hoy', expectedImpact: 'Reducir riesgo 40%' },
            { action: 'Sesi√≥n gratuita con director', priority: 'high', timeframe: '2 d√≠as', expectedImpact: 'Retenci√≥n 70%' },
            { action: 'Descuento renovaci√≥n anual', priority: 'medium', timeframe: '1 semana', expectedImpact: 'Incentivo retenci√≥n' }
          ],
          relatedClients: ['Ana Garc√≠a'],
          createdAt: '2025-01-27',
          status: 'active'
        },
        {
          id: 'ALT-003',
          type: 'operational',
          severity: 'warning',
          title: 'Capacidad Horarios Saturada',
          description: 'Horarios prime-time con 95% ocupaci√≥n causando insatisfacci√≥n',
          metric: 'Ocupaci√≥n Horarios',
          currentValue: 95,
          threshold: 85,
          trend: 'stable',
          impact: 'medium',
          timeframe: '2 semanas',
          autoGenerated: true,
          actionRequired: true,
          recommendations: [
            { action: 'Ampliar horarios prime-time', priority: 'high', timeframe: '1 semana', expectedImpact: '+20% capacidad' },
            { action: 'Incentivar horarios valle', priority: 'medium', timeframe: '3 d√≠as', expectedImpact: 'Redistribuir 15%' },
            { action: 'Sistema reservas prioritarias', priority: 'low', timeframe: '2 semanas', expectedImpact: 'Mejora satisfacci√≥n' }
          ],
          createdAt: '2025-01-26',
          status: 'in_progress'
        },
        {
          id: 'ALT-004',
          type: 'risk',
          severity: 'warning',
          title: 'Concentraci√≥n de Ingresos Elevada',
          description: 'El 68% de ingresos proviene de solo 3 servicios principales',
          metric: 'Concentraci√≥n Ingresos',
          currentValue: 68,
          threshold: 60,
          trend: 'stable',
          impact: 'medium',
          timeframe: 'Largo plazo',
          autoGenerated: true,
          actionRequired: false,
          recommendations: [
            { action: 'Desarrollar servicios complementarios', priority: 'medium', timeframe: '1 mes', expectedImpact: 'Diversificar 15%' },
            { action: 'Ampliar target demogr√°fico', priority: 'low', timeframe: '3 meses', expectedImpact: 'Reducir dependencia' }
          ],
          createdAt: '2025-01-25',
          status: 'active'
        },
        {
          id: 'ALT-005',
          type: 'financial',
          severity: 'info',
          title: 'Oportunidad de Optimizaci√≥n Fiscal',
          description: 'Posible ahorro del 12% en gastos operativos mediante renegociaci√≥n',
          trend: 'improving',
          impact: 'low',
          timeframe: '1 mes',
          autoGenerated: false,
          actionRequired: false,
          recommendations: [
            { action: 'Renegociar contrato alquiler', priority: 'medium', timeframe: '2 semanas', expectedImpact: 'Ahorro 200‚Ç¨/mes' },
            { action: 'Consolidar proveedores', priority: 'low', timeframe: '1 mes', expectedImpact: 'Ahorro 150‚Ç¨/mes' }
          ],
          createdAt: '2025-01-24',
          status: 'active'
        }
      ];

      setAlerts(mockAlerts);
      setLoading(false);
    }, 400);
  }, []);

  if (loading) {
    return (
      <div className="bg-white rounded-lg shadow p-6">
        <div className="animate-pulse">
          <div className="h-4 bg-gray-200 rounded w-1/3 mb-6"></div>
          <div className="space-y-4">
            {[1, 2, 3, 4].map(i => (
              <div key={i} className="h-24 bg-gray-200 rounded"></div>
            ))}
          </div>
        </div>
      </div>
    );
  }

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'urgent': return { bg: 'bg-red-100', border: 'border-red-300', text: 'text-red-800', icon: 'üÜò' };
      case 'critical': return { bg: 'bg-red-50', border: 'border-red-200', text: 'text-red-700', icon: 'üö®' };
      case 'warning': return { bg: 'bg-yellow-50', border: 'border-yellow-200', text: 'text-yellow-700', icon: '‚ö†Ô∏è' };
      case 'info': return { bg: 'bg-blue-50', border: 'border-blue-200', text: 'text-blue-700', icon: 'üí°' };
      default: return { bg: 'bg-gray-50', border: 'border-gray-200', text: 'text-gray-700', icon: '‚ÑπÔ∏è' };
    }
  };

  const getTypeIcon = (type: string) => {
    switch (type) {
      case 'financial': return 'üí∞';
      case 'operational': return '‚öôÔ∏è';
      case 'commercial': return 'üë•';
      case 'risk': return '‚ö°';
      default: return 'üìä';
    }
  };

  const getTrendIcon = (trend: string) => {
    switch (trend) {
      case 'improving': return 'üìà';
      case 'stable': return '‚û°Ô∏è';
      case 'declining': return 'üìâ';
      default: return '‚ùì';
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'active': return 'bg-red-100 text-red-700';
      case 'in_progress': return 'bg-yellow-100 text-yellow-700';
      case 'resolved': return 'bg-green-100 text-green-700';
      case 'dismissed': return 'bg-gray-100 text-gray-700';
      default: return 'bg-gray-100 text-gray-700';
    }
  };

  const filteredAlerts = alerts.filter(alert => {
    let matchesFilter = true;
    let matchesType = true;

    // Filter by severity/action
    if (filter === 'critical') matchesFilter = alert.severity === 'critical' || alert.severity === 'urgent';
    if (filter === 'actionable') matchesFilter = alert.actionRequired;
    if (filter === 'unresolved') matchesFilter = alert.status === 'active' || alert.status === 'in_progress';

    // Filter by type
    if (selectedType !== 'all') matchesType = alert.type === selectedType;

    return matchesFilter && matchesType;
  });

  const criticalCount = alerts.filter(a => a.severity === 'critical' || a.severity === 'urgent').length;
  const actionableCount = alerts.filter(a => a.actionRequired && a.status === 'active').length;
  const totalRevenueLoss = alerts.reduce((acc, a) => acc + (a.estimatedRevenueLoss || 0), 0);

  const markAsResolved = (alertId: string) => {
    setAlerts(prev => prev.map(alert =>
      alert.id === alertId ? { ...alert, status: 'resolved' as const } : alert
    ));
  };

  const markAsInProgress = (alertId: string) => {
    setAlerts(prev => prev.map(alert =>
      alert.id === alertId ? { ...alert, status: 'in_progress' as const } : alert
    ));
  };

  return (
    <div className="bg-white rounded-lg shadow p-6">
      <div className="flex justify-between items-center mb-6">
        <h3 className="text-lg font-semibold text-gray-800">Sistema de Alertas Inteligentes</h3>
        <div className="flex space-x-2">
          <select
            value={selectedType}
            onChange={(e) => setSelectedType(e.target.value as any)}
            className="px-3 py-1 border border-gray-300 rounded-md text-sm"
          >
            <option value="all">Todos los tipos</option>
            <option value="financial">Financiero</option>
            <option value="commercial">Comercial</option>
            <option value="operational">Operacional</option>
            <option value="risk">Riesgo</option>
          </select>
          <select
            value={filter}
            onChange={(e) => setFilter(e.target.value as any)}
            className="px-3 py-1 border border-gray-300 rounded-md text-sm"
          >
            <option value="all">Todas las alertas</option>
            <option value="critical">Cr√≠ticas</option>
            <option value="actionable">Requieren acci√≥n</option>
            <option value="unresolved">Sin resolver</option>
          </select>
        </div>
      </div>

      {/* Alert summary */}
      <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
        <div className="bg-gradient-to-r from-red-50 to-red-100 p-4 rounded-lg">
          <div className="text-sm text-red-600 font-medium">Alertas Cr√≠ticas</div>
          <div className="text-2xl font-bold text-red-700">{criticalCount}</div>
          <div className="text-xs text-red-600">Requieren atenci√≥n inmediata</div>
        </div>
        <div className="bg-gradient-to-r from-yellow-50 to-yellow-100 p-4 rounded-lg">
          <div className="text-sm text-yellow-600 font-medium">Acci√≥n Requerida</div>
          <div className="text-2xl font-bold text-yellow-700">{actionableCount}</div>
          <div className="text-xs text-yellow-600">Pendientes de resolver</div>
        </div>
        <div className="bg-gradient-to-r from-purple-50 to-purple-100 p-4 rounded-lg">
          <div className="text-sm text-purple-600 font-medium">Impacto Econ√≥mico</div>
          <div className="text-2xl font-bold text-purple-700">{totalRevenueLoss.toLocaleString()}‚Ç¨</div>
          <div className="text-xs text-purple-600">Riesgo total estimado</div>
        </div>
        <div className="bg-gradient-to-r from-blue-50 to-blue-100 p-4 rounded-lg">
          <div className="text-sm text-blue-600 font-medium">Automatizaci√≥n</div>
          <div className="text-2xl font-bold text-blue-700">
            {Math.round((alerts.filter(a => a.autoGenerated).length / alerts.length) * 100)}%
          </div>
          <div className="text-xs text-blue-600">Alertas autom√°ticas</div>
        </div>
      </div>

      {/* Active alerts */}
      <div className="space-y-4">
        {filteredAlerts.map((alert) => {
          const severityColors = getSeverityColor(alert.severity);

          return (
            <div key={alert.id} className={`border rounded-lg p-4 ${severityColors.border} ${severityColors.bg}`}>
              <div className="flex items-start justify-between mb-3">
                <div className="flex items-start space-x-3">
                  <div className="flex items-center space-x-1">
                    <span className="text-lg">{getTypeIcon(alert.type)}</span>
                    <span className="text-lg">{severityColors.icon}</span>
                  </div>
                  <div className="flex-1">
                    <div className="flex items-center space-x-2 mb-1">
                      <h4 className={`font-semibold ${severityColors.text}`}>{alert.title}</h4>
                      <span className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(alert.status)}`}>
                        {alert.status.toUpperCase()}
                      </span>
                      {alert.autoGenerated && (
                        <span className="px-2 py-1 bg-blue-100 text-blue-600 rounded-full text-xs font-medium">
                          ü§ñ AUTO
                        </span>
                      )}
                    </div>
                    <p className={`text-sm ${severityColors.text} mb-2`}>{alert.description}</p>

                    {/* Metrics */}
                    {alert.metric && (
                      <div className="flex items-center space-x-4 text-sm mb-2">
                        <div>
                          <span className="text-gray-600">{alert.metric}: </span>
                          <span className="font-medium">{alert.currentValue}</span>
                          {alert.threshold && (
                            <span className="text-gray-500"> (umbral: {alert.threshold})</span>
                          )}
                        </div>
                        <div className="flex items-center space-x-1">
                          <span>{getTrendIcon(alert.trend)}</span>
                          <span className="text-gray-600 capitalize">{alert.trend}</span>
                        </div>
                        <div>
                          <span className="text-gray-600">Plazo: </span>
                          <span className="font-medium">{alert.timeframe}</span>
                        </div>
                      </div>
                    )}

                    {/* Revenue impact */}
                    {alert.estimatedRevenueLoss && (
                      <div className="bg-red-100 bg-opacity-50 rounded p-2 mb-3">
                        <div className="text-sm font-medium text-red-800">
                          üí∏ Impacto Econ√≥mico Estimado: {alert.estimatedRevenueLoss.toLocaleString()}‚Ç¨
                        </div>
                      </div>
                    )}

                    {/* Related clients */}
                    {alert.relatedClients && alert.relatedClients.length > 0 && (
                      <div className="text-sm text-gray-600 mb-2">
                        <span className="font-medium">Clientes afectados: </span>
                        {alert.relatedClients.join(', ')}
                      </div>
                    )}
                  </div>
                </div>

                <div className="text-right text-sm text-gray-500">
                  {new Date(alert.createdAt).toLocaleDateString()}
                </div>
              </div>

              {/* Recommendations */}
              <div className="mb-4">
                <div className="text-sm font-medium text-gray-700 mb-2">üéØ Acciones Recomendadas:</div>
                <div className="space-y-2">
                  {alert.recommendations.map((rec, index) => (
                    <div key={index} className="bg-white bg-opacity-70 rounded p-3 border-l-4 border-blue-400">
                      <div className="flex items-center justify-between mb-1">
                        <span className="font-medium text-gray-800">{rec.action}</span>
                        <div className="flex items-center space-x-2">
                          <span className={`px-2 py-1 rounded text-xs font-medium ${
                            rec.priority === 'high' ? 'bg-red-100 text-red-700' :
                            rec.priority === 'medium' ? 'bg-yellow-100 text-yellow-700' :
                            'bg-green-100 text-green-700'
                          }`}>
                            {rec.priority.toUpperCase()}
                          </span>
                        </div>
                      </div>
                      <div className="text-sm text-gray-600">
                        <span className="font-medium">Plazo:</span> {rec.timeframe} ‚Ä¢
                        <span className="font-medium"> Impacto:</span> {rec.expectedImpact}
                      </div>
                    </div>
                  ))}
                </div>
              </div>

              {/* Action buttons */}
              <div className="flex items-center justify-between pt-3 border-t border-gray-200">
                <div className="text-xs text-gray-500">
                  ID: {alert.id} ‚Ä¢ {alert.actionRequired ? 'Acci√≥n requerida' : 'Informativo'}
                </div>

                <div className="flex space-x-2">
                  {alert.status === 'active' && (
                    <>
                      <button
                        onClick={() => markAsInProgress(alert.id)}
                        className="px-3 py-1 bg-yellow-100 text-yellow-700 rounded-md text-sm font-medium hover:bg-yellow-200 transition-colors"
                      >
                        üîÑ En Progreso
                      </button>
                      <button
                        onClick={() => markAsResolved(alert.id)}
                        className="px-3 py-1 bg-green-100 text-green-700 rounded-md text-sm font-medium hover:bg-green-200 transition-colors"
                      >
                        ‚úÖ Resolver
                      </button>
                    </>
                  )}
                  <button className="px-3 py-1 bg-blue-100 text-blue-700 rounded-md text-sm font-medium hover:bg-blue-200 transition-colors">
                    üìã Crear Tarea
                  </button>
                  <button className="px-3 py-1 bg-gray-100 text-gray-700 rounded-md text-sm font-medium hover:bg-gray-200 transition-colors">
                    ‚öôÔ∏è Configurar
                  </button>
                </div>
              </div>
            </div>
          );
        })}
      </div>

      {/* Alert configuration panel */}
      <div className="mt-6 p-4 bg-gray-50 rounded-lg">
        <h4 className="font-semibold text-gray-800 mb-3">üîß Configuraci√≥n de Alertas</h4>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
          <div className="space-y-2">
            <div className="font-medium text-gray-700">Umbrales Autom√°ticos:</div>
            <ul className="space-y-1 text-gray-600">
              <li>‚Ä¢ Flujo de caja m√≠nimo: 5.000‚Ç¨</li>
              <li>‚Ä¢ Churn rate cr√≠tico: >70%</li>
              <li>‚Ä¢ Ocupaci√≥n m√°xima: 85%</li>
              <li>‚Ä¢ Concentraci√≥n ingresos: 60%</li>
            </ul>
          </div>
          <div className="space-y-2">
            <div className="font-medium text-gray-700">Frecuencia Monitoreo:</div>
            <ul className="space-y-1 text-gray-600">
              <li>‚Ä¢ M√©tricas financieras: Diario</li>
              <li>‚Ä¢ An√°lisis clientes: Semanal</li>
              <li>‚Ä¢ Proyecciones: Cada 3 d√≠as</li>
              <li>‚Ä¢ Alertas operativas: Tiempo real</li>
            </ul>
          </div>
          <div className="space-y-2">
            <div className="font-medium text-gray-700">Acciones R√°pidas:</div>
            <div className="space-y-1">
              <button className="block w-full text-left px-2 py-1 bg-white rounded text-blue-600 hover:bg-blue-50">
                üìä Generar Reporte de Alertas
              </button>
              <button className="block w-full text-left px-2 py-1 bg-white rounded text-blue-600 hover:bg-blue-50">
                ‚öôÔ∏è Personalizar Umbrales
              </button>
              <button className="block w-full text-left px-2 py-1 bg-white rounded text-blue-600 hover:bg-blue-50">
                üîî Configurar Notificaciones
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default AlertasInteligentes;