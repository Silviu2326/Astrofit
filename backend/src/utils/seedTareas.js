import mongoose from 'mongoose';
import dotenv from 'dotenv';
import Tarea from '../models/Tarea.model.js';
import Trainer from '../models/Trainer.model.js';
import Cliente from '../models/Cliente.model.js';

dotenv.config();

const seedTareas = async () => {
  try {
    console.log('üå± Iniciando seed de tareas...');

    // Conectar a MongoDB
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ Conectado a MongoDB');

    // Obtener el trainer CORE
    const coreTrainer = await Trainer.findOne({ email: 'core@trainerpro.com' });
    if (!coreTrainer) {
      console.error('‚ùå No se encontr√≥ el trainer CORE');
      process.exit(1);
    }
    console.log(`‚úÖ Trainer CORE encontrado: ${coreTrainer.name}`);

    // Obtener algunos clientes del trainer
    const clientes = await Cliente.find({
      trainerId: coreTrainer._id,
      isDeleted: false
    }).limit(3);

    // Eliminar tareas existentes del trainer
    await Tarea.deleteMany({ trainerId: coreTrainer._id });
    console.log('üóëÔ∏è  Tareas anteriores eliminadas');

    // Tareas de ejemplo
    const tareasData = [
      {
        trainerId: coreTrainer._id,
        titulo: 'Llamar a Mar√≠a para seguimiento de rutina',
        descripcion: 'Revisar c√≥mo se siente con la nueva rutina de piernas y ajustar si es necesario',
        fechaVencimiento: new Date(Date.now() + 2 * 24 * 60 * 60 * 1000), // En 2 d√≠as
        estado: 'pendiente',
        prioridad: 'alta',
        asignadoA: coreTrainer.name,
        clienteId: clientes[0]?._id,
        clienteRelacionado: clientes[0]?.nombre,
        notasAdicionales: 'Mencionar que puede reducir peso si siente dolor',
        etiquetas: ['seguimiento', 'rutina']
      },
      {
        trainerId: coreTrainer._id,
        titulo: 'Actualizar plan nutricional de Carlos',
        descripcion: 'Aumentar calor√≠as en 200 kcal y ajustar distribuci√≥n de macros para fase de volumen',
        fechaVencimiento: new Date(Date.now() + 1 * 24 * 60 * 60 * 1000), // Ma√±ana
        estado: 'en progreso',
        prioridad: 'alta',
        asignadoA: coreTrainer.name,
        clienteId: clientes[1]?._id,
        clienteRelacionado: clientes[1]?.nombre,
        notasAdicionales: 'Cliente quiere ganar masa muscular de forma limpia',
        etiquetas: ['nutrici√≥n', 'volumen']
      },
      {
        trainerId: coreTrainer._id,
        titulo: 'Preparar sesi√≥n de valoraci√≥n inicial',
        descripcion: 'Dise√±ar protocolo de evaluaci√≥n f√≠sica para nuevos clientes del mes',
        fechaVencimiento: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000), // En 5 d√≠as
        estado: 'pendiente',
        prioridad: 'media',
        asignadoA: coreTrainer.name,
        notasAdicionales: 'Incluir tests de fuerza, resistencia cardiovascular y composici√≥n corporal',
        etiquetas: ['valoraci√≥n', 'nuevos-clientes']
      },
      {
        trainerId: coreTrainer._id,
        titulo: 'Enviar recordatorio de pago a Ana',
        descripcion: 'Recordar que la mensualidad vence en 3 d√≠as',
        fechaVencimiento: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000), // En 3 d√≠as
        estado: 'pendiente',
        prioridad: 'media',
        asignadoA: coreTrainer.name,
        clienteId: clientes[2]?._id,
        clienteRelacionado: clientes[2]?.nombre,
        etiquetas: ['facturaci√≥n', 'pago']
      },
      {
        trainerId: coreTrainer._id,
        titulo: 'Crear contenido para redes sociales',
        descripcion: 'Preparar 5 posts para Instagram sobre mitos del fitness',
        fechaVencimiento: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // En 1 semana
        estado: 'pendiente',
        prioridad: 'baja',
        asignadoA: coreTrainer.name,
        notasAdicionales: 'Incluir im√°genes y videos cortos para mayor engagement',
        etiquetas: ['marketing', 'redes-sociales']
      },
      {
        trainerId: coreTrainer._id,
        titulo: 'Renovar certificaci√≥n de primeros auxilios',
        descripcion: 'Inscribirse en curso de recertificaci√≥n antes de que expire',
        fechaVencimiento: new Date(Date.now() + 14 * 24 * 60 * 60 * 1000), // En 2 semanas
        estado: 'pendiente',
        prioridad: 'media',
        asignadoA: coreTrainer.name,
        notasAdicionales: 'Certificaci√≥n actual expira el pr√≥ximo mes',
        etiquetas: ['certificaci√≥n', 'formaci√≥n']
      },
      {
        trainerId: coreTrainer._id,
        titulo: 'Revisar progreso mensual de todos los clientes',
        descripcion: 'Analizar m√©tricas de todos los clientes activos y generar reporte',
        fechaVencimiento: new Date(Date.now() + 10 * 24 * 60 * 60 * 1000), // En 10 d√≠as
        estado: 'pendiente',
        prioridad: 'alta',
        asignadoA: coreTrainer.name,
        notasAdicionales: 'Identificar clientes que necesiten ajustes en su plan',
        etiquetas: ['an√°lisis', 'reporte']
      },
      {
        trainerId: coreTrainer._id,
        titulo: 'Comprar material deportivo nuevo',
        descripcion: 'Adquirir bandas el√°sticas, kettlebells y colchonetas adicionales',
        fechaVencimiento: new Date(Date.now() + 6 * 24 * 60 * 60 * 1000), // En 6 d√≠as
        estado: 'pendiente',
        prioridad: 'baja',
        asignadoA: coreTrainer.name,
        notasAdicionales: 'Presupuesto aprobado: $500',
        etiquetas: ['compras', 'equipamiento']
      },
      {
        trainerId: coreTrainer._id,
        titulo: 'Tarea completada: Actualizar web personal',
        descripcion: 'Agregar testimonios de clientes y actualizar fotos del gimnasio',
        fechaVencimiento: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000), // Hace 2 d√≠as
        fechaCompletada: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000), // Completada hace 1 d√≠a
        estado: 'completada',
        prioridad: 'media',
        asignadoA: coreTrainer.name,
        notasAdicionales: 'Web actualizada y publicada',
        etiquetas: ['marketing', 'web']
      },
      {
        trainerId: coreTrainer._id,
        titulo: 'URGENTE: Reuni√≥n con proveedor de suplementos',
        descripcion: 'Negociar descuentos para clientes y revisar nuevo cat√°logo',
        fechaVencimiento: new Date(Date.now() + 1 * 24 * 60 * 60 * 1000), // Ma√±ana
        estado: 'en progreso',
        prioridad: 'alta',
        asignadoA: coreTrainer.name,
        notasAdicionales: 'Llevar lista de productos m√°s demandados',
        etiquetas: ['reuni√≥n', 'proveedores']
      }
    ];

    // Crear las tareas
    const tareasCreadas = await Tarea.insertMany(tareasData);
    console.log(`‚úÖ ${tareasCreadas.length} tareas creadas exitosamente`);

    // Mostrar estad√≠sticas
    const stats = await Tarea.getStatsByTrainer(coreTrainer._id);
    console.log('\nüìä Estad√≠sticas de tareas:');
    console.log(`   Total: ${stats.total}`);
    console.log(`   Pendientes: ${stats.pendientes}`);
    console.log(`   En Progreso: ${stats.enProgreso}`);
    console.log(`   Completadas: ${stats.completadas}`);
    console.log(`   Vencidas: ${stats.vencidas}`);
    console.log(`   Urgentes: ${stats.urgentes}`);

    console.log('\n‚ú® Seed de tareas completado exitosamente');
    process.exit(0);
  } catch (error) {
    console.error('‚ùå Error en seed de tareas:', error);
    process.exit(1);
  }
};

seedTareas();
