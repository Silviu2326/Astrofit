Necesito que instales la librer√≠a ReactFlow que es requerida para el m√≥dulo de crear-flujo de automatizaciones. Ejecuta el siguiente comando:

npm install reactflow

Y verifica que se haya instalado correctamente revisando el package.json

---

Analiza el m√≥dulo src/features/plansolomax/automatizaciones/automatizaciones/crear-flujo/ y identifica qu√© componentes necesitan ser completados y mejorados.

El m√≥dulo debe ser un constructor visual avanzado para crear flujos de automatizaci√≥n con:
- Drag & drop de nodos
- Conectores visuales
- Panel de propiedades
- Nodos disparadores (triggers)
- Nodos de acciones
- Interfaz moderna y profesional

Revisa todos los archivos existentes y haz un diagn√≥stico de qu√© est√° implementado y qu√© falta.

---

Completa y mejora el componente ConstructorVisual.tsx para que sea un constructor visual completo con las siguientes caracter√≠sticas:

1. **Funcionalidad de Drag & Drop avanzada**:
   - Soporte para arrastrar nodos desde el panel lateral
   - Snap to grid opcional
   - Selecci√≥n m√∫ltiple de nodos
   - Deshacer/Rehacer acciones

2. **Tipos de nodos personalizados**:
   - Nodo disparador (trigger) con icono espec√≠fico
   - Nodo acci√≥n con diferentes tipos (email, sms, webhook, etc.)
   - Nodo condici√≥n (if/else)
   - Nodo delay/espera

3. **Interfaz visual moderna**:
   - Estilos profesionales con gradientes y sombras
   - Animaciones suaves
   - Colores distintivos por tipo de nodo
   - Iconos de Lucide React

4. **Funcionalidades avanzadas**:
   - Validaci√≥n de conexiones
   - Auto-layout inteligente
   - Zoom y pan
   - Minimap
   - Toolbar con herramientas

Usa ReactFlow como base pero personaliza completamente la apariencia y funcionalidad.

---

Mejora y completa el componente NodosDisparadores.tsx para que sea un panel lateral completo con:

1. **Categor√≠as de disparadores organizadas**:
   - üìß Email (nuevo email, respuesta, apertura)
   - üë§ Cliente (nuevo registro, actualizaci√≥n perfil, inactividad)
   - üìÖ Tiempo (fecha espec√≠fica, recurrente, despu√©s de X d√≠as)
   - üõí Transacciones (nueva compra, pago fallido, reembolso)
   - üì± Comportamiento (visita p√°gina, descarga, click)
   - üéØ Eventos personalizados

2. **Cada disparador debe mostrar**:
   - Icono distintivo
   - Nombre descriptivo
   - Breve descripci√≥n
   - Arrastrable al canvas

3. **Dise√±o visual atractivo**:
   - Cards con hover effects
   - Colores categorizados
   - B√∫squeda/filtro
   - Iconos de Lucide React
   - Animaciones smooth

4. **Funcionalidad drag & drop**:
   - Indicador visual al arrastrar
   - Preview del nodo
   - Feedback visual

---

Mejora y completa el componente NodosAcciones.tsx para que sea un panel lateral completo con:

1. **Categor√≠as de acciones organizadas**:
   - üìß Comunicaci√≥n (email, sms, push notification, WhatsApp)
   - üë§ CRM (actualizar contacto, a√±adir tag, cambiar estado)
   - üè∑Ô∏è Marketing (a√±adir a lista, campaign, lead scoring)
   - ‚è∞ Temporizaci√≥n (esperar X tiempo, programar tarea)
   - üîó Integraciones (webhook, API call, Zapier)
   - üìä Analytics (track event, update metrics)
   - ‚úÖ Tareas (crear tarea, asignar usuario, recordatorio)

2. **Cada acci√≥n debe mostrar**:
   - Icono distintivo y colorido
   - Nombre descriptivo
   - Descripci√≥n de la funci√≥n
   - Badges con etiquetas (premium, b√°sico, etc.)

3. **Dise√±o visual profesional**:
   - Grid layout responsive
   - Hover effects elegantes
   - Colores diferenciados por categor√≠a
   - Animaciones de microinteracciones
   - Iconos de Lucide React

4. **Funcionalidad avanzada**:
   - B√∫squeda en tiempo real
   - Filtros por categor√≠a
   - Favoritos/m√°s usados
   - Drag & drop fluido

---

Completa y mejora el componente PanelPropiedades.tsx para que sea un panel de configuraci√≥n completo con:

1. **Informaci√≥n del nodo seleccionado**:
   - Tipo de nodo (disparador/acci√≥n/condici√≥n)
   - Nombre editable
   - Descripci√≥n
   - Estado (activo/inactivo)

2. **Configuraci√≥n espec√≠fica por tipo**:
   - **Email**: plantilla, remitente, asunto, adjuntos
   - **SMS**: mensaje, n√∫mero origen
   - **Webhook**: URL, m√©todo HTTP, headers, payload
   - **Condici√≥n**: operadores, valores, l√≥gica
   - **Delay**: tiempo, unidad (minutos/horas/d√≠as)

3. **Validaci√≥n y testing**:
   - Validaci√≥n en tiempo real
   - Bot√≥n "Test" para probar configuraci√≥n
   - Indicadores de estado
   - Mensajes de error/√©xito

4. **Dise√±o UX excelente**:
   - Formularios intuitivos
   - Campos condicionales
   - Tooltips informativos
   - Botones de acci√≥n prominentes
   - Tabs para organizar configuraciones complejas

---

Crea y mejora el componente ConectorFlujo.tsx para que maneje las conexiones entre nodos con:

1. **Tipos de conectores**:
   - Conexi√≥n directa (√©xito)
   - Conexi√≥n condicional (if/else)
   - Conexi√≥n de error
   - Conexi√≥n temporal (delay)

2. **Validaci√≥n de conexiones**:
   - Reglas de negocio (qu√© se puede conectar con qu√©)
   - Prevenir loops infinitos
   - M√°ximo de conexiones por nodo
   - Validaci√≥n de flujo l√≥gico

3. **Interfaz visual**:
   - Colores diferentes por tipo de conexi√≥n
   - Animaciones de flujo de datos
   - Labels en las conexiones
   - Handles de conexi√≥n personalizados

4. **Funcionalidades**:
   - Click para editar condiciones
   - Eliminar conexiones
   - Reordenar prioridades
   - Copy/paste de configuraciones

---

Mejora el componente principal CrearFlujoPage.tsx para que tenga:

1. **Header completo con**:
   - T√≠tulo del flujo (editable)
   - Botones: Guardar, Probar, Publicar, Configuraci√≥n
   - Breadcrumbs de navegaci√≥n
   - Estado del flujo (borrador/activo/pausado)

2. **Layout responsive mejorado**:
   - Sidebar colapsable para nodos
   - Panel de propiedades redimensionable
   - Canvas que se adapta al contenido
   - Modales para configuraciones avanzadas

3. **Funcionalidades adicionales**:
   - Auto-save cada X segundos
   - Historial de versiones
   - Templates predefinidos
   - Exportar/importar flujos

4. **Estados y gesti√≥n**:
   - Context API para estado global del flujo
   - Persistencia local/remota
   - Manejo de errores
   - Loading states

5. **Dise√±o visual premium**:
   - Gradientes modernos
   - Sombras y profundidad
   - Animaciones fluidas
   - Tema oscuro/claro opcional

---

Crea tipos TypeScript y interfaces para todo el m√≥dulo de crear-flujo en un archivo types.ts que incluya:

1. **Tipos de nodos**:
   - NodeType (trigger, action, condition, delay)
   - TriggerNode, ActionNode, ConditionNode, DelayNode
   - NodeData con propiedades espec√≠ficas
   - NodePosition, NodeStyle

2. **Tipos de conexiones**:
   - ConnectionType (success, error, conditional, delay)
   - EdgeData con configuraciones
   - ConnectionRule para validaciones

3. **Estado del flujo**:
   - FlowState (draft, active, paused, error)
   - FlowConfig con metadatos
   - FlowVersion para historial

4. **Configuraciones**:
   - EmailConfig, SMSConfig, WebhookConfig
   - ConditionConfig, DelayConfig
   - ValidationResult, TestResult

5. **Props de componentes**:
   - Interfaces para todos los props de componentes
   - Event handlers tipados
   - Callback types

Aseg√∫rate de que todos los tipos sean estrictos y bien documentados con JSDoc.

---

Crea un sistema de validaci√≥n completo para el m√≥dulo crear-flujo que incluya:

1. **Validador de flujo** (flujoValidator.ts):
   - Validar que el flujo tenga al menos un disparador
   - Verificar que no haya nodos hu√©rfanos
   - Detectar loops infinitos
   - Validar configuraciones de nodos
   - Verificar conectividad del flujo

2. **Validador de nodos** (nodoValidator.ts):
   - Validaci√≥n espec√≠fica por tipo de nodo
   - Campos requeridos
   - Formatos de datos (email, URL, etc.)
   - Rangos de valores v√°lidos

3. **Sistema de testing** (testRunner.ts):
   - Simular ejecuci√≥n de flujos
   - Test de nodos individuales
   - Reportes de resultados
   - Logs de ejecuci√≥n

4. **Mensajes de error/√©xito**:
   - Mensajes informativos para usuarios
   - Diferentes niveles (info, warning, error)
   - Sugerencias de correcci√≥n
   - Localizaci√≥n en espa√±ol

---

Agrega funcionalidades avanzadas al m√≥dulo crear-flujo:

1. **Sistema de templates** (templates.ts):
   - Templates predefinidos (bienvenida, abandono de carrito, reactivaci√≥n)
   - Categor√≠as de templates
   - Preview de templates
   - Instalaci√≥n con un click

2. **Auto-layout inteligente** (autoLayout.ts):
   - Algoritmo para organizar nodos autom√°ticamente
   - Detecci√≥n de patrones comunes
   - Optimizaci√≥n de conexiones
   - Distribuci√≥n equitativa

3. **Export/Import** (importExport.ts):
   - Exportar flujos a JSON
   - Importar desde archivos
   - Compartir flujos entre usuarios
   - Backup autom√°tico

4. **Analytics y m√©tricas** (analytics.ts):
   - Tracking de uso de nodos
   - Estad√≠sticas de rendimiento
   - Identificar cuellos de botella
   - Sugerencias de optimizaci√≥n

5. **Colaboraci√≥n** (collaboration.ts):
   - Comentarios en nodos
   - Historial de cambios
   - Versioning del flujo
   - Permisos de edici√≥n

Implementa cada funcionalidad con su respectiva interfaz de usuario integrada.